diff --git a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.spec.ts b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.spec.ts
index b88ad13..9a8451d 100644
--- a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.spec.ts
+++ b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.spec.ts
@@ -1,20 +1,27 @@
 import { Test, TestingModule } from '@nestjs/testing';
 import { SiteSsrController } from './site-ssr.controller';
 import { SiteSsrService } from './site-ssr.service';
+import { FirestoreService } from '@mhc-api/firestore';

 describe('SiteSsrController', () => {
   let controller: SiteSsrController;

   beforeEach(async () => {
     const module: TestingModule = await Test.createTestingModule({
       controllers: [SiteSsrController],
-      providers: [SiteSsrService],
+      providers: [
+        SiteSsrService,
+        {
+          provide: FirestoreService,
+          useValue: { getServices: jest.fn().mockResolvedValue([]) },
+        },
+      ],
     }).compile();

     controller = module.get<SiteSsrController>(SiteSsrController);
   });

   it('should be defined', () => {
     expect(controller).toBeDefined();
   });
 });
diff --git a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.ts b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.ts
index e375053..aa130d6 100644
--- a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.ts
+++ b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.controller.ts
@@ -1,21 +1,20 @@
 import {
   Controller,
   Get,
   Req,
   Res,
-  type Request,
-  type Response,
 } from '@nestjs/common';
+import type { Request, Response } from 'express';
 import { SiteSsrService } from './site-ssr.service';


 @Controller('/')
 export class SiteSsrController {
   constructor(private readonly ssr: SiteSsrService) {}

   @Get('*')
-  async handle(@Req() req: typeof Request, @Res() res: typeof Response) {
+  async handle(@Req() req: Request, @Res() res: Response) {
     const html = await this.ssr.render(req);
     res.send(html);
   }
 }
diff --git a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.module.ts b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.module.ts
index 24d8c79..a4eab2f 100644
--- a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.module.ts
+++ b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.module.ts
@@ -1,9 +1,11 @@
 import { Module } from '@nestjs/common';
 import { SiteSsrService } from './site-ssr.service';
 import { SiteSsrController } from './site-ssr.controller';
+import { FirestoreModule } from '@mhc-api/firestore';

 @Module({
+  imports: [FirestoreModule],
   controllers: [SiteSsrController],
   providers: [SiteSsrService],
 })
 export class SiteSsrModule {}
diff --git a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.spec.ts b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.spec.ts
index 2676aab..3183bd5 100644
--- a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.spec.ts
+++ b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.spec.ts
@@ -1,18 +1,25 @@
 import { Test, TestingModule } from '@nestjs/testing';
 import { SiteSsrService } from './site-ssr.service';
+import { FirestoreService } from '@mhc-api/firestore';

 describe('SiteSsrService', () => {
   let service: SiteSsrService;

   beforeEach(async () => {
     const module: TestingModule = await Test.createTestingModule({
-      providers: [SiteSsrService],
+      providers: [
+        SiteSsrService,
+        {
+          provide: FirestoreService,
+          useValue: { getServices: jest.fn().mockResolvedValue([]) },
+        },
+      ],
     }).compile();

     service = module.get<SiteSsrService>(SiteSsrService);
   });

   it('should be defined', () => {
     expect(service).toBeDefined();
   });
 });
diff --git a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.ts b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.ts
index 02afc78..c8139c2 100644
--- a/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.ts
+++ b/apps/mhc-api/src/app/modules/site-ssr/site-ssr.service.ts
@@ -1,12 +1,37 @@
-import { Injectable } from '@nestjs/common';
-import { CreateSiteSsrDto } from './dto/create-site-ssr.dto';
-import { UpdateSiteSsrDto } from './dto/update-site-ssr.dto';
+import { Injectable, Logger } from '@nestjs/common';
+import { renderModule } from '@angular/platform-server';
+import { join } from 'path';
+import { readFileSync } from 'fs';
+import { FirestoreService } from '@mhc-api/firestore';
+
+type RequestLike = { url: string };

 @Injectable()
 export class SiteSsrService {
+  private readonly logger = new Logger(SiteSsrService.name);

-  render(createSiteSsrDto: CreateSiteSsrDto) {
-    return 'This returns the static html';
-  }
+  constructor(private firestore: FirestoreService) {}
+
+  async render(req: RequestLike): Promise<string> {
+    const serverPath = join(process.cwd(), 'dist/site/main.server.js');
+    const { AppServerModule } = await import(serverPath);
+
+    const indexPath = join(process.cwd(), 'dist/site/browser/index.html');
+    const document = readFileSync(indexPath, 'utf-8');

+    const services = await this.firestore.getServices();
+
+    this.logger.debug(`Rendering URL ${req.url}`);
+
+    return renderModule(AppServerModule, {
+      document,
+      url: req.url,
+      extraProviders: [
+        {
+          provide: 'SSR_DATA',
+          useValue: { services },
+        },
+      ],
+    });
+  }
 }
diff --git a/libs/shared/firestore/src/lib/firestore.service.ts b/libs/shared/firestore/src/lib/firestore.service.ts
index 2e35980..22b24d6 100644
--- a/libs/shared/firestore/src/lib/firestore.service.ts
+++ b/libs/shared/firestore/src/lib/firestore.service.ts
@@ -21,26 +21,33 @@ export class FirestoreService {
     this.logger.debug(`Firestore initialized for project: ${projectId}, database: ${databaseId}`)
   }

   // async onModuleInit(): Promise<void> {
   //   try {
   //     const pingDoc = this.firestore.collection('__meta').doc('__ping')
   //     await pingDoc.set({ ts: new Date().toISOString() }, { merge: true })

   //     this.logger.log('✅ Firestore connection verified via __meta/__ping document.')
   //   } catch (err) {
   //     this.logger.error('❌ Firestore connection failed:', err)
   //     process.exit(1); // optional: hard-fail app startup
   //   }
   // }

   async getDocument(collection: string, docId: string): Promise<any> {
     this.logger.debug(`Fetching document from collection: ${collection}, docId: ${docId}`)
     const doc = await this.firestore.collection(collection).doc(docId).get()
     this.logger.debug(`Fetched document from collection: ${collection}, docId: ${docId}`)
     return doc.exists ? doc.data() : null
   }

   async setDocument(collection: string, data: any): Promise<void> {
     await this.firestore.collection(collection).doc().set(instanceToPlain(data), { merge: true })
   }
+
+  async getServices(): Promise<any[]> {
+    this.logger.debug('Fetching services collection')
+    const snapshot = await this.firestore.collection('services').get()
+    this.logger.debug(`Fetched ${snapshot.size} services`)
+    return snapshot.docs.map((d) => d.data())
+  }
 }
diff --git a/libs/ssr-client/README.md b/libs/ssr-client/README.md
new file mode 100644
index 0000000..ee225fb
--- /dev/null
+++ b/libs/ssr-client/README.md
@@ -0,0 +1,3 @@
+# SSR Client Library
+
+Provides utilities for accessing data passed from the NestJS server during server-side rendering.
diff --git a/libs/ssr-client/package.json b/libs/ssr-client/package.json
new file mode 100644
index 0000000..33e7eff
--- /dev/null
+++ b/libs/ssr-client/package.json
@@ -0,0 +1,37 @@
+{
+  "name": "@mhc-api/ssr-client",
+  "version": "0.0.1",
+  "private": true,
+  "type": "module",
+  "exports": {
+    ".": {
+      "development": "./src/index.ts",
+      "types": "./src/index.d.ts",
+      "import": "./src/dist/index.js",
+      "default": "./src/dist/index.js"
+    },
+    "./src/index.ts": "./src/index.ts"
+  },
+  "dependencies": {
+    "tslib": "^2.3.0"
+  },
+  "nx": {
+    "targets": {
+      "build": {
+        "executor": "@nx/js:tsc",
+        "outputs": [
+          "{options.outputPath}"
+        ],
+        "options": {
+          "outputPath": "dist/libs/ssr-client",
+          "tsConfig": "libs/ssr-client/tsconfig.lib.json",
+          "packageJson": "libs/ssr-client/package.json",
+          "main": "libs/ssr-client/src/index.ts",
+          "assets": [
+            "libs/ssr-client/*.md"
+          ]
+        }
+      }
+    }
+  }
+}
diff --git a/libs/ssr-client/src/index.d.ts b/libs/ssr-client/src/index.d.ts
new file mode 100644
index 0000000..9bd9e2f
--- /dev/null
+++ b/libs/ssr-client/src/index.d.ts
@@ -0,0 +1 @@
+export * from './lib/ssr-data.service';
diff --git a/libs/ssr-client/src/index.ts b/libs/ssr-client/src/index.ts
new file mode 100644
index 0000000..0dc775f
--- /dev/null
+++ b/libs/ssr-client/src/index.ts
@@ -0,0 +1 @@
+export * from './lib/ssr-data.service.js';
diff --git a/libs/ssr-client/src/lib/ssr-data.service.ts b/libs/ssr-client/src/lib/ssr-data.service.ts
new file mode 100644
index 0000000..ca34023
--- /dev/null
+++ b/libs/ssr-client/src/lib/ssr-data.service.ts
@@ -0,0 +1,16 @@
+import { Inject, Injectable, Optional } from '@angular/core';
+import { HttpClient } from '@angular/common/http';
+import { Observable, of } from 'rxjs';
+
+@Injectable({ providedIn: 'root' })
+export class SsrDataService {
+  constructor(private http: HttpClient, @Optional() @Inject('SSR_DATA') private ssrData: any) {}
+
+  getServices(): Observable<any[]> {
+    if (this.ssrData) {
+      return of(this.ssrData.services ?? []);
+    }
+
+    return this.http.get<any[]>('/api/services');
+  }
+}
diff --git a/libs/ssr-client/tsconfig.json b/libs/ssr-client/tsconfig.json
new file mode 100644
index 0000000..5e10c60
--- /dev/null
+++ b/libs/ssr-client/tsconfig.json
@@ -0,0 +1,6 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "files": [],
+  "include": [],
+  "references": [{ "path": "./tsconfig.lib.json" }]
+}
diff --git a/libs/ssr-client/tsconfig.lib.json b/libs/ssr-client/tsconfig.lib.json
new file mode 100644
index 0000000..926e7b9
--- /dev/null
+++ b/libs/ssr-client/tsconfig.lib.json
@@ -0,0 +1,22 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "baseUrl": ".",
+    "rootDir": ".",
+    "outDir": "../../dist/libs/ssr-client",
+    "tsBuildInfoFile": "../../libs/ssr-client/dist/tsconfig.lib.tsbuildinfo",
+    "composite": true,
+    "declaration": true,
+    "declarationMap": true,
+    "emitDeclarationOnly": false,
+    "forceConsistentCasingInFileNames": true,
+    "types": ["node"],
+    "target": "es2021",
+    "strictNullChecks": true,
+    "noImplicitAny": true,
+    "strictBindCallApply": true,
+    "noFallthroughCasesInSwitch": true
+  },
+  "include": ["src/**/*.ts"],
+  "references": []
+}
diff --git a/package.json b/package.json
index 495859d..5e6c5ed 100644
--- a/package.json
+++ b/package.json
@@ -6,50 +6,55 @@
   "private": true,
   "dependencies": {
     "@google-cloud/firestore": "^7.11.0",
     "@google-cloud/storage": "^7.16.0",
     "@nestjs/common": "^10.0.2",
     "@nestjs/config": "^4.0.2",
     "@nestjs/core": "^10.0.2",
     "@nestjs/mapped-types": "*",
     "@nestjs/platform-express": "^10.0.2",
     "@types/express": "^5.0.1",
     "@types/multer": "^1.4.12",
     "axios": "^1.6.0",
     "class-transformer": "^0.5.1",
     "class-validator": "^0.14.2",
     "cookie-parser": "^1.4.7",
     "express": "^5.1.0",
     "firebase-admin": "^13.3.0",
     "google-auth-library": "^9.15.1",
     "googleapis": "^148.0.0",
     "jsonwebtoken": "^9.0.2",
     "multer": "1.4.5-lts.2",
     "reflect-metadata": "^0.1.13",
     "rxjs": "^7.8.0",
     "uuid": "^11.1.0"
   },
+  "peerDependencies": {
+    "@angular/core": "^16.0.0",
+    "@angular/platform-browser": "^16.0.0",
+    "@angular/platform-server": "^16.0.0"
+  },
   "devDependencies": {
     "@eslint/js": "^9.8.0",
     "@nestjs/schematics": "^10.0.1",
     "@nestjs/testing": "^10.0.2",
     "@nx/eslint": "21.0.2",
     "@nx/eslint-plugin": "21.0.2",
     "@nx/jest": "21.0.2",
     "@nx/js": "21.0.2",
     "@nx/nest": "21.0.2",
     "@nx/node": "21.0.2",
     "@nx/web": "21.0.2",
     "@nx/webpack": "21.0.2",
     "@nx/workspace": "21.0.2",
     "@swc-node/register": "~1.9.1",
     "@swc/core": "~1.5.7",
     "@swc/helpers": "~0.5.11",
     "@swc/jest": "~0.2.36",
     "@types/cookie-parser": "^1.4.8",
     "@types/jest": "^29.5.12",
     "@types/jsonwebtoken": "^9.0.9",
     "@types/node": "~18.16.9",
     "cookie-parser": "^1.4.7",
     "eslint": "^9.8.0",
     "eslint-config-prettier": "^10.0.0",
     "jest": "^29.7.0",
diff --git a/pnpm-workspace.yaml b/pnpm-workspace.yaml
index 39c7113..8650501 100644
--- a/pnpm-workspace.yaml
+++ b/pnpm-workspace.yaml
@@ -1,3 +1,4 @@
 packages:
   - 'apps/*'
   - 'libs/shared/*'
+  - 'libs/ssr-client'
diff --git a/tsconfig.base.json b/tsconfig.base.json
index 4d861e7..ca9ea0d 100644
--- a/tsconfig.base.json
+++ b/tsconfig.base.json
@@ -3,29 +3,30 @@
     "composite": true,
     "declarationMap": true,
     "emitDeclarationOnly": true,
     "importHelpers": true,
     "isolatedModules": true,
     "lib": ["es2022"],
     "module": "nodenext",
     "moduleResolution": "nodenext",
     "noEmitOnError": true,
     "noFallthroughCasesInSwitch": true,
     "noImplicitOverride": true,
     "noImplicitReturns": true,
     "noUnusedLocals": true,
     "skipLibCheck": true,
     "strict": true,
     "target": "es2022",
     "customConditions": ["development"],
     "baseUrl": ".",
     "paths": {
       "@/*": ["./src/*"],
       "@mhc-api/*": ["libs/shared/*/src/index.ts"],
       "@mhc-api/auth": ["libs/shared/auth/src/index.ts"],
       "@mhc-api/firestore": ["libs/shared/firestore/src/index.ts"],
       "@mhc-api/gmail": ["libs/shared/gmail/src/index.ts"],
       "@mhc-api/storage": ["libs/shared/storage/src/index.ts"],
+      "@mhc-api/ssr-client": ["libs/ssr-client/src/index.ts"],
       "@test/*": ["./test/*"]
     }
   }
 }
diff --git a/tsconfig.json b/tsconfig.json
index 25d8b00..830c7fc 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -2,27 +2,31 @@
   "extends": "./tsconfig.base.json",
   "compileOnSave": false,
   "files": [],
   "references": [
     {
       "path": "./apps/mhc-api-e2e"
     },
     {
       "path": "./apps/mhc-api"
     },
     {
       "path": "./libs/shared/storage"
     },
     {
       "path": "./libs/shared/firestore"
     },
     {
       "path": "./libs/shared/gmail"
     },
     {
       "path": "./libs/shared/auth"
     },
     {
       "path": "./libs/shared/config"
     }
+    ,
+    {
+      "path": "./libs/ssr-client"
+    }
   ]
 }
